@q scanner.web @>
@q Created by Laurence Finston Thu Oct 10 13:42:23 CEST 2013 @>

@q * (1) Copyright and License. @>

@q This file is part of calchours, a package for keeping track of working hours. @>
@q Copyright (C) 2013, 2014 Laurence D. Finston @>

@q calchours is free software; you can redistribute it and/or modify  @>
@q it under the terms of the GNU General Public License as published by  @>
@q the Free Software Foundation; either version 3 of the License, or  @>
@q (at your option) any later version.   @>

@q gwrdifpk is distributed in the hope that it will be useful,  @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of  @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  @>
@q GNU General Public License for more details.   @>

@q You should have received a copy of the GNU General Public License  @>
@q along with gwrdifpk; if not, write to the Free Software  @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q gwrdifpk is available for downloading via Git from  @>
@q https://github.com/lfinston/gwrdifpk-github.git. @>

@q Please send bug reports to Laurence.Finston@gmx.de @>

@q The author can be contacted at:  @>

@q Laurence.Finston@gmx.de @>

@* Scanner.

@q ** (2) Include header files   @>
@
@<Include header files@>=

#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

#include <limits.h>

#include <fstream>
#include <getopt.h> 
#include <iomanip>
#include <ios>
#include <iostream>
#include <iterator>
#include <new>
#include <string>
#include <ctype.h>
#include <time.h>
#include <math.h>
#include <sstream>   
#include <stdarg.h>
#include <stdexcept>
#include <mysql.h>


#include <vector>
#include <map>
#include <string>

using namespace std;

#if HAVE_CONFIG_H
#include <config.h>
#endif 

#include "calchrs01.h++"



@q ** (2) @>
@
@<Declarations@>=

struct
File_Node
  {
      YY_BUFFER_STATE buffer;
      string in_filename;
  };




@q ** (2) Options  @>
@
@<Options@>=
@=%option header-file="scanner.h++"@>
@=%option reentrant@>

@q ** (2) Definitions @>
@
@<Definitions@>=

DAY Mon|Tue|Wed|Thu|Fri|Sat|Sun|Mo|Di|Mi|Do|Fr|Sa|So

MONTH Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|M(\344)r|M(\303\244)r|MÃ¤r|Mai|Okt|Dez

DATE [[:digit:]]{1,2}\.?

TIME [[:digit:]]{1,2}:[[:digit:]]{1,2}:[[:digit:]]{1,2}

TIMEZONE CEST|CET

YEAR [[:digit:]]{4}

@q ** (2) @>
@
@<Local variables@>=

bool SCANNER_DEBUG = false; /* |true| */

int current_date    = 0;
int current_year    = 0;
int current_month   = 0;
int current_hours   = 0;
int current_minutes = 0;
int current_seconds = 0;

int status = 0;

stringstream temp_strm;

time_t temp_time = static_cast<time_t>(0); 

@q ** (2) Rules @>

@q *** (3) @>
@
@<Rules@>=

@={DATE} {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {
      cerr << "Got date:  " << yytext << endl;
   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   unsigned long int temp_date = strtoul(yytext, 0, 10);

   if (temp_date == ULONG_MAX)
   {
      cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':  Failed to convert date."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   else if (temp_date > 31)
   {
      cerr << "ERROR!  `temp_date' == " << temp_date << " (> 31):"
           << endl
           << "Invalid date value."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {
       cerr << "temp_date == " << temp_date << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   if (static_cast<int>(temp_date) != current_date)
   {


#if DEBUG_COMPILE
        if (SCANNER_DEBUG)
        {

             cerr << "Setting `current_date' to " << temp_date << endl;

        }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


        current_date = static_cast<int>(temp_date); 
   }
   else
   {
#if DEBUG_COMPILE
        if (SCANNER_DEBUG)
        {

             cerr << "`current_date' == `temp_date' == " << temp_date 
                  << endl
                  << "Not resetting `current_date'."
                  << endl;

        }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   }  /* |else|  */

}

@q *** (3) @>
@
@<Rules@>=

@={MONTH} {@>

@q **** (4) @>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got month:  " << yytext << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   map<string, int>::iterator iter = month_map.find(string(yytext));

   int temp_month = 0;

   if (iter != month_map.end())
       temp_month = iter->second;

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "temp_month == " << temp_month << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   if (temp_month != current_month)
   {
#if DEBUG_COMPILE
        if (SCANNER_DEBUG)
        {


             cerr << "Setting `current_month' to " << temp_month << endl;

        }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


        current_month = temp_month;
   }
   else
   {

#if DEBUG_COMPILE
        if (SCANNER_DEBUG)
        {

             cerr << "`current_month' == `temp_month' == " << temp_month 
                  << endl
                  << "Not resetting `current_month'."
                  << endl;

        }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   }

@q **** (4) @>

}

@q *** (3) @>
@
@<Rules@>=

@={DAY} {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got day:  " << yytext << " (ignoring)" << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

}

@q *** (3) @>
@
@<Rules@>=

@={TIME} {@>

@q **** (4) @>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got time:  " << yytext << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   string s = yytext;

   string temp_str;

@q **** (4) @>

   size_t pos = s.find(":");

   temp_str = s;

   temp_str.erase(pos);

   s.erase(0, pos + 1);

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "temp_str == " << temp_str << endl
             << "s == " << s << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   unsigned long temp_val = strtoul(temp_str.c_str(), 0, 10);

   if (temp_val == ULONG_MAX)
   {
      cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':  Failed to convert time."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   else if (temp_val > 23)
   {
      cerr << "ERROR!  `temp_val' == " << temp_val << " (> 23):"
           << endl
           << "Invalid hour value."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }


   current_hours = static_cast<int>(temp_val); 

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "current_hours == " << current_hours << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q **** (4) @>

   pos = s.find(":");

   temp_str = s;

   temp_str.erase(pos);

   s.erase(0, pos + 1);

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "temp_str == " << temp_str << endl
             << "s == " << s << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   temp_val = strtoul(temp_str.c_str(), 0, 10);

   if (temp_val == ULONG_MAX)
   {
      cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':  Failed to convert time."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   else if (temp_val > 59)
   {
      cerr << "ERROR!  `temp_val' == " << temp_val << " (> 59):"
           << endl
           << "Invalid minute value."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   current_minutes = static_cast<int>(temp_val); 

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "current_minutes == " << current_minutes << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>


   temp_val = strtoul(s.c_str(), 0, 10);

   if (temp_val == ULONG_MAX)
   {
      cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':  Failed to convert time."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   else if (temp_val > 59)
   {
      cerr << "ERROR!  `temp_val' == " << temp_val << " (> 59):"
           << endl
           << "Invalid second value."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   current_seconds = static_cast<int>(temp_val); 

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "current_seconds == " << current_seconds << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q **** (4) @>

}

@q *** (3) @>
@
@<Rules@>=

@={TIMEZONE} {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got timezone:  " << yytext << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

}

@q *** (3) @>
@
@<Rules@>=

@={YEAR} {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got year:  " << yytext << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   unsigned long int temp_year = strtoul(yytext, 0, 10);

   if (temp_year == ULONG_MAX)
   {
      cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':  Failed to convert year."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

   else if (temp_year > 2030)
   {
      cerr << "ERROR!  `temp_year' == " << temp_year << " (> 2030):"
           << endl
           << "Invalid year value."
           << endl
           << "Exiting `yylex' unsuccessfully with return value 1."
           << endl;

       return 1;

   }

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "temp_year == " << temp_year << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   if (static_cast<int>(temp_year) != current_year)
   {
#if DEBUG_COMPILE
        if (SCANNER_DEBUG)
        {

             cerr << "Setting `current_year' to " << temp_year << endl;

        }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

        current_year = static_cast<int>(temp_year); 
   }
   else
   {
#if DEBUG_COMPILE
        if (SCANNER_DEBUG)
        {

             cerr << "`current_year' == `temp_year' == " << temp_year 
                  << endl
                  << "Not resetting `current_year'."
                  << endl;

        }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   }

}

@q *** (3) Comment.  @>
@ Comment.
@<Rules@>=

@=#.*$ {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got comment:  " << yytext << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

}

@q *** (3) endinput.  @>
@ endinput.
@<Rules@>=

@=endinput|ENDINPUT {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "endinput:  Exiting `yylex' successfully with return value 0."  
             << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);

   delete file_node_ptr;

   return 0;

}


@q *** (3) Newline.  @>
@ Newline.

\LOG
\initials{LDF 2013.10.18.}
Now allowing midnight as a valid time.
\ENDLOG 

@<Rules@>=

@=\n {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got end of line." << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   temp_time = static_cast<time_t>(0); 

   if (current_year > 0 && current_month > 0 && current_date > 0
       && current_hours >= 0 && current_minutes >= 0 && current_seconds >= 0)
   {
#if DEBUG_COMPILE
       if (SCANNER_DEBUG)
       {

           cerr << "current_year   == " << current_year
                << endl 
                << "current_month   == " << current_month 
                << endl
                << "current_date    == " << current_date 
                << endl
                << "current_hours   == " << current_hours 
                << endl
                << "current_minutes == " << current_minutes 
                << endl
                << "current_seconds == " << current_seconds 
                << endl;

       }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       temp_strm.str("");

       temp_strm << current_year << "-" << current_month << "-" << current_date << " " 
                 << current_hours << ":" << current_minutes << ":" << current_seconds;

#if DEBUG_COMPILE
       if (SCANNER_DEBUG)
       {

           cerr << "temp_strm.str() == " << temp_strm.str() << endl;

       }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

       status = get_seconds_since_epoch(temp_strm.str().c_str(), temp_time);

       if (status != 0)
       {
           cerr << "ERROR!  In `yylex':  "  
                << "`get_seconds_since_epoch' failed, returning " << status << "."
                << endl
                << "Exiting `calchours' unsuccessfully with exit status 1."
                << endl;

           return 1;

       }
#if DEBUG_COMPILE
       else if (SCANNER_DEBUG)
       {
           cerr << "In `yylex':  "  
                << "`get_seconds_since_epoch' succeeded, returning 0:"
                << endl
                << "temp_time == " << temp_time << endl;

       }  /* |else if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */        

   
       time_vector_ptr->push_back(make_pair(temp_time, temp_strm.str()));

#if DEBUG_COMPILE
       if (SCANNER_DEBUG)
       {
           cerr << "time_vector_ptr->size() == " << time_vector_ptr->size() << endl;

       }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


   }  /* |if|  */

#if DEBUG_COMPILE
   else if (SCANNER_DEBUG)
   {
       cerr << "No datetime specification found.  Not pushing string onto `*time_vector_ptr'."
            << endl;

   }  /* |else if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   current_month = current_year = 0;
   current_hours = current_minutes = current_seconds = -1;

}

@=[[:blank:]]+ {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got blank." << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

}

@q *** (3) @>
@
@<Rules@>=

@=. {@>
  
#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {

        cerr << "Got other character: " << yytext << endl;

   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

}

@q *** (3) @>

@ End-of-file

@<Rules@>=

@=<<EOF>> {@>

#if DEBUG_COMPILE
   if (SCANNER_DEBUG)
   {
       cerr << "*** Scanning End of file ***" << endl;
   }  /* |if (SCANNER_DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

   yy_delete_buffer(YY_CURRENT_BUFFER, yyscanner);

   delete file_node_ptr;
 
   return 0;
}


@q ** (2) Putting scanner together.  @>

@ Putting scanner together.  
\initials{LDF 2013.10.10.}

@c
@=%{@>
@<Include header files@>@;@/
@<Declarations@>@;@/
struct File_Node* file_node_ptr = 0;
extern map<string, int> month_map;
extern map<int, string> day_of_week_map;
@=%}@>
@<Options@>@;@/
@<Definitions@>@;@/
@=%%@>
@=%{@>
@<Local variables@>@;@/
@=%}@>
@= vector<pair<time_t, string> > *time_vector_ptr @>
@=    = static_cast<vector<pair<time_t, string> >*>(yyextra); @>
@<Rules@>@;@/
@=%%@>

int
yywrap(yyscan_t param)
{
    return 1;
}

int
yyerror(yyscan_t param)
{
    return 0;
}


@q ** (2) @>
@
@(scanner1.h++@>=
@<Declarations@>@;@/
extern struct File_Node* file_node_ptr;

@q * (1) @>

/* 
 For use in indirect buffers.
(progn
 (outline-minor-mode t)
 (setq outline-regexp "/\\* *%+")
 )

*/

/* Local Variables: */
/* mode:CWEB  */
/* outline-minor-mode:t  */
/* outline-regexp:"/\\* *%+" */
/* End: */

